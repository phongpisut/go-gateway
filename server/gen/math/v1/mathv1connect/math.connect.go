// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: math/v1/math.proto

package mathv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/phongpisut/go-gateway/gen/math/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MathServiceName is the fully-qualified name of the MathService service.
	MathServiceName = "math.v1.MathService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MathServiceAddProcedure is the fully-qualified name of the MathService's Add RPC.
	MathServiceAddProcedure = "/math.v1.MathService/Add"
	// MathServiceMultiplyProcedure is the fully-qualified name of the MathService's Multiply RPC.
	MathServiceMultiplyProcedure = "/math.v1.MathService/Multiply"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mathServiceServiceDescriptor        = v1.File_math_v1_math_proto.Services().ByName("MathService")
	mathServiceAddMethodDescriptor      = mathServiceServiceDescriptor.Methods().ByName("Add")
	mathServiceMultiplyMethodDescriptor = mathServiceServiceDescriptor.Methods().ByName("Multiply")
)

// MathServiceClient is a client for the math.v1.MathService service.
type MathServiceClient interface {
	Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error)
	Multiply(context.Context, *connect.Request[v1.MultiplyRequest]) (*connect.Response[v1.MultiplyResponse], error)
}

// NewMathServiceClient constructs a client for the math.v1.MathService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMathServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MathServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mathServiceClient{
		add: connect.NewClient[v1.AddRequest, v1.AddResponse](
			httpClient,
			baseURL+MathServiceAddProcedure,
			connect.WithSchema(mathServiceAddMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		multiply: connect.NewClient[v1.MultiplyRequest, v1.MultiplyResponse](
			httpClient,
			baseURL+MathServiceMultiplyProcedure,
			connect.WithSchema(mathServiceMultiplyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mathServiceClient implements MathServiceClient.
type mathServiceClient struct {
	add      *connect.Client[v1.AddRequest, v1.AddResponse]
	multiply *connect.Client[v1.MultiplyRequest, v1.MultiplyResponse]
}

// Add calls math.v1.MathService.Add.
func (c *mathServiceClient) Add(ctx context.Context, req *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error) {
	return c.add.CallUnary(ctx, req)
}

// Multiply calls math.v1.MathService.Multiply.
func (c *mathServiceClient) Multiply(ctx context.Context, req *connect.Request[v1.MultiplyRequest]) (*connect.Response[v1.MultiplyResponse], error) {
	return c.multiply.CallUnary(ctx, req)
}

// MathServiceHandler is an implementation of the math.v1.MathService service.
type MathServiceHandler interface {
	Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error)
	Multiply(context.Context, *connect.Request[v1.MultiplyRequest]) (*connect.Response[v1.MultiplyResponse], error)
}

// NewMathServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMathServiceHandler(svc MathServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mathServiceAddHandler := connect.NewUnaryHandler(
		MathServiceAddProcedure,
		svc.Add,
		connect.WithSchema(mathServiceAddMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mathServiceMultiplyHandler := connect.NewUnaryHandler(
		MathServiceMultiplyProcedure,
		svc.Multiply,
		connect.WithSchema(mathServiceMultiplyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/math.v1.MathService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MathServiceAddProcedure:
			mathServiceAddHandler.ServeHTTP(w, r)
		case MathServiceMultiplyProcedure:
			mathServiceMultiplyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMathServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMathServiceHandler struct{}

func (UnimplementedMathServiceHandler) Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("math.v1.MathService.Add is not implemented"))
}

func (UnimplementedMathServiceHandler) Multiply(context.Context, *connect.Request[v1.MultiplyRequest]) (*connect.Response[v1.MultiplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("math.v1.MathService.Multiply is not implemented"))
}
